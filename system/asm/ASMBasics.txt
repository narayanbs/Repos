Assembly Instructions come with three kind of Operands -- Register, Memory and Immediate

Register Operands
--------------------

Integer registers. (64-bit)

R0   R1   R2   R3   R4   R5   R6   R7   R8   R9   R10   R11   R12   R13   R14   R15
RAX  RCX  RDX  RBX  RSP  RBP  RSI  RDI 

R0D  R1D  R2D  R3D  R4D  R5D  R6D  R7D  R8D  R9D  R10D  R11D  R12D  R13D  R14D  R15D
EAX  ECX  EDX  EBX  ESP  EBP  ESI  EDI

R0W  R1W  R2W  R3W  R4W  R5W  R6W  R7W  R8W  R9W  R10W  R11W  R12W  R13W  R14W  R15W
AX   CX   DX   BX   SP   BP   SI   DI

R0B  R1B  R2B  R3B  R4B  R5B  R6B  R7B  R8B  R9B  R10B  R11B  R12B  R13B  R14B  R15B
AL   CL   DL   BL   SPL  BPL  SIL  DIL
AH   CH   DH   BH

RAX	    Accumulator	    
RBX	    Base	         
RCX	    Counter	      
RDX	    Data	       
RSI	    Source Index	    
RDI	    Destination Index 
RBP	    Base pointer
RSP	    Stack pointer
R8-R15	New registers


(128-bit)   ==> SSE (streaming simd extensions) registers. 

XMM0 XMM1 XMM2 XMM3 XMM4 XMM5 XMM6 XMM7 XMM8 XMM9 XMM10 XMM11 XMM12 XMM13 XMM14 XMM15

AVX --> Advanced Vector Extensions ==> SIMD register width was extended to 256-bit and renamed from
XMM0 - XMM15 to YMM0 to YMM15

YMM0 YMM1 YMM2 YMM3 YMM4 YMM5 YMM6 YMM7 YMM8 YMM9 YMM10 YMM11 YMM12 YMM13 YMM14 YMM15

SSE and AVX registers are used to perform floating point artihmetic and integer arithmetic. 

RIP -- Instruction Pointer
RFLAGS -- Flags register (stores condition flags)

Memory operands
----------------
[number]   // displacement
[reg]  // base register only 
[reg + reg * scale]  // base + index * scale where scale is 1, 2, 4 or 8
[reg + number]  // base + displacement
[reg + reg*scale + number]  // base + index * scale + displacement

ex:
[750]                  ; displacement only
[rbp]                  ; base register only
[rcx + rsi*4]          ; base + index * scale
[rbp + rdx]            ; scale is 1
[rbx - 8]              ; displacement is -8
[rax + rdi*8 + 500]    ; all four components
[rbx + counter]        ; uses the address of the variable 'counter' as the displacement


Immediate operands
------------------
200          ; decimal
0200         ; still decimal - the leading 0 does not make it octal
0d200        ; also decimal - 0d prefex
0200d        ; explicitly decimal - d suffix

0xc8         ; hex - the classic 0x prefix
0hc8         ; hex - for some reason NASM likes 0h
0c8h         ; hex - h suffix, but leading 0 is required because c8h looks like a var

0q310        ; octal - 0q prefix
310o         ; octal - o suffix
0777o        ; octal - o suffix
310q         ; octal - q suffix

0b1100_1000  ; binary - 0b prefix, and by the way, underscores are allowed
11001000b    ; binary - b suffix

-------------------

Most of the instructions will be as follows

* add reg, reg
* add reg, mem
* add reg, imm
* add mem, reg
* add mem, imm

Instructions with two memory operands are very very rare.. we hardly find them. 

Defining data and reserving space
-----------------------------------
Note: For "C" programs, uninitialized global and static variables are placed in .bss section where as initialized global and static variables
are stored in the data section. In the case of constants like const char* strVar = "Hello world", strVar is stored in data section and 
"Hello world" is stored in the readonly data section (rodata). 

data section

      db    0x55                ; just the byte 0x55
      db    0x55,0x56,0x57      ; three bytes in succession
      db    'a',0x55            ; character constants are OK
      db    'hello',13,10,'$'   ; so are string constants
      dw    0x1234              ; 0x34 0x12
      dw    'a'                 ; 0x61 0x00 (it's just a number)
      dw    'ab'                ; 0x61 0x62 (character constant)
      dw    'abc'               ; 0x61 0x62 0x63 0x00 (string)
      dd    0x12345678          ; 0x78 0x56 0x34 0x12
      dd    1.234567e20         ; floating-point constant
      dq    0x123456789abcdef0  ; eight byte constant
      dq    1.234567e20         ; double-precision float
      dt    1.234567e20         ; extended-precision float

.bss section

      buffer:         resb    64              ; reserve 64 bytes
      wordvar:        resw    1               ; reserve a word
      doublevar:      resd    1               ; reserve a double word (4 bytes)
      realarray:      resq    10              ; array of ten reals (10 * 8 bytes)
      tenbuf:         rest    1               ; reserve 10 bytes


Note:-----------------
A struct can be declared and used in the following way

section .data
arguments:  dq  command
            dq  arg1
            dq  0h


mov rsi, arguments

Note:--------------------
An example of memory addresses using  base + index * scale + displacement  
Let's consider an array of ten integers i.e. int a[10];
a[5] provides access to the sixth integer. 
To do this in assembly 
base = address of array
index = 5 (for the sixth element)
scale = 4 (each integer is four bytes)
displacement = 0

mov rsi, 5                  ; Load the index (6th element) into rsi
mov rdi, arr                ; Load base address of arr into rdi
mov eax, [rdi + rsi*4]      ; Access the 6th element of arr (rdi + 5*4)


Understanding Calling Conventions when calling a C library
-----------------------------------------------------------

When writing code for 64-bit Linux that integrates with a C library, you must follow the calling conventions explained in the AMD64 ABI. 

* From left to right, pass as many parameters as will fit in registers. The order in which registers are allocated, are:
  For integers and pointers, rdi, rsi, rdx, rcx, r8, r9.
  For floating-point (float, double), xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7.
  
* Additional parameters are pushed on the stack, right to left, and are to be removed by the caller after the call.

* After the parameters are pushed, the call instruction is made, so when the called function gets control, the return address is at [rsp], 
the first memory parameter is at [rsp+8], etc.

* The stack pointer rsp must be aligned to a 16-byte boundary before making a call. 

* When you are inside a function, remember the return address (8 bytes) is on the stack, so when you call another function rsp is not aligned. 
You have to make that extra space yourself, by pushing something or subtracting 8 from rsp.

* functions are required preserve rbx, rbp, rsp, r12, r13, r14, r15 registers. floating point registers are not preserved
between function calls. All others are free to be changed by the calling function. 

* So before invoking, the caller function is required to save RAX, RCX, RDX, RSI, RDI, R8 to R11, XMM0 to XMM7

* Integers are returned in rax or rdx:rax, and floating point values are returned in xmm0 or xmm1:xmm0.

Understanding packed double (pd) and scalar double (sd) in floating point SSE 
------------------------------------------------------------------------------
In SSE, the 128 bits registers can be represented as two 64-bit elements or four 32-bit elements.

SSE defines two types of operations; scalar and packed.
Scalar operation only operates on the least-significant data element (bit 0~31 or 0~63), and packed operation computes all elements in parallel.

for ex: 

_mm_cmpeq_ss is designed to work with single-precision (32-bit) floating-point elements and would only compare the least-significant data element (first 32 bits) of the two operands (scalar).

_mm_cmpeq_ps is designed to work with single-precision (32-bit) floating-point elements and would compare each group of 32 bits in parallel (packed).

_mm_cmpeq_sd is designed to work with double-precision (64-bit) floating-point elements and would only compare the least-significant data element (first 64 bits) of the two operands (scalar).

_mm_cmpeq_pd is designed to work with double-precision (64-bit) floating-point elements as well but would compare each two groups of 64 bits in parallel (packed).

If you're using 32 bits float, you could pack the float in quadruplet to make use of the 128 bits space. That way, _mm_cmpeq_ps would be able to make 4 comparison in parallel.

If you're using 64 bits double, you could pack the double in pair to make use of the 128 bits space. That way, _mm_cmpeq_pd would be able to make 2 comparison in parallel.

If you want to make only one comparison at a time, you can use _mm_cmpeq_sd to compare two 64 bits double or _mm_cmpeq_ss to compare two 32 bits float.

Note that _mm_cmpeq_sd and _mm_cmpeq_pd are SSE2 while _mm_cmpeq_ss and _mm_cmpeq_ps are SSE.

---------------------------------------------
Next Read Articles/Assembly/NASM Tutorial.html to understand SIMD and floating point examples.
Next Read Articles/Assembly/GCC-Inline-Assembly-HOWTO.html to understand how assembly can be used inline in C programs.
------------------------------------------------------------------------------------------------------------------------------------

Varargs function, vector registers and RAX 
-----------------------------------

In the x86_64 ABI, if a function has variable arguments then AL (which is part of EAX) is expected 
to hold the number of vector registers used to hold arguments to that function.

For example:

printf("%d", 1);

has an integer argument so thereâ€™s no need for a vector register, hence AL is set to 0.

On the other hand, if you change the example to:

printf("%f", 1.0f);

then the floating-point literal is stored in a vector register and, correspondingly, AL is set to 1:

movsd   LC1(%rip), %xmm0
leaq    LC0(%rip), %rdi
movl    $1, %eax
call    _printf

As expected:

printf("%f %f", 1.0f, 2.0f);

will cause the compiler to set AL to 2 since there are two floating-point arguments:

movsd   LC0(%rip), %xmm0
movapd  %xmm0, %xmm1
movsd   LC2(%rip), %xmm0
leaq    LC1(%rip), %rdi
movl    $2, %eax
call    _printf

